on: [push, pull_request]
name: Publish
jobs:
  publish:
    name: Publish
    runs-on: self-hosted
    if: false && github.event_name == 'push' && ( github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' ) # <- This make sure the workflow is skipped without any alert
    steps:
    - name: Upgrade Node.js
      run: |
        export NVM_DIR="/home/almalinux/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        read node_version _ <<< $(nvm current)
        # latest_lts_version=$(nvm ls-remote --lts | grep 'v20' | tail -1 | sed 's/.*\(v[0-9]*\.[0-9]*\.[0-9]*\).*/\1/')
        latest_lts_version=$(nvm ls-remote --lts | tail -1 | sed 's/.*\(v[0-9]*\.[0-9]*\.[0-9]*\).*/\1/')

        if [ "${node_version}" != "${latest_lts_version}" ]; then
          if [ "$(printf '%s\n' "$node_version" "$latest_lts_version" | sort -V | head -n1)" = "$latest_lts_version" ]; then
            echo -e "${GREEN}Downgrading Node to ${latest_lts_version}${NC}"
            nvm install "${latest_lts_version}" --reinstall-packages-from="$(nvm current)" && nvm uninstall "${node_version}"
          else
            echo -e "${GREEN}Upgrading Node to ${latest_lts_version}${NC}"
            nvm install "${latest_lts_version}" --reinstall-packages-from="$(nvm current)" && nvm uninstall "${node_version}"
          fi
        fi
    - name: "Set up Node.js using nvm"
      run: |
        export NVM_DIR="/home/almalinux/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm use node
        node -v
    - uses: actions/checkout@v4
    - name: Build
      if: steps.cache-modules.outputs.cache-hit != 'true'
      run: npm install && npm run build
    - name: Publish
      uses: mikeal/merge-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
